{\rtf1\ansi\ansicpg936\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14160\viewh12080\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 0000000000400f43 <phase_3>:\
  400f43:	48 83 ec 18          	sub    $0x18,%rsp\
  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx\
  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx\
  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi\
  400f56:	b8 00 00 00 00       	mov    $0x0,%eax\
  400f5b:	e8 90 fc ff ff       	callq  400bf0 <__isoc99_sscanf@plt>\
  400f60:	83 f8 01             	cmp    $0x1,%eax\
  400f63:	7f 05                	jg     400f6a <phase_3+0x27>\
  400f65:	e8 d0 04 00 00       	callq  40143a <explode_bomb>\
  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)\
  400f6f:	77 3c                	ja     400fad <phase_3+0x6a>\
  400f71:	8b 44 24 08          	mov    0x8(%rsp),%eax\
  400f75:	ff 24 c5 70 24 40 00 	jmpq   *0x402470(,%rax,8)\
  400f7c:	b8 cf 00 00 00       	mov    $0xcf,%eax\
  400f81:	eb 3b                	jmp    400fbe <phase_3+0x7b>\
  400f83:	b8 c3 02 00 00       	mov    $0x2c3,%eax\
  400f88:	eb 34                	jmp    400fbe <phase_3+0x7b>\
  400f8a:	b8 00 01 00 00       	mov    $0x100,%eax\
  400f8f:	eb 2d                	jmp    400fbe <phase_3+0x7b>\
  400f91:	b8 85 01 00 00       	mov    $0x185,%eax\
  400f96:	eb 26                	jmp    400fbe <phase_3+0x7b>\
  400f98:	b8 ce 00 00 00       	mov    $0xce,%eax\
  400f9d:	eb 1f                	jmp    400fbe <phase_3+0x7b>\
  400f9f:	b8 aa 02 00 00       	mov    $0x2aa,%eax\
  400fa4:	eb 18                	jmp    400fbe <phase_3+0x7b>\
  400fa6:	b8 47 01 00 00       	mov    $0x147,%eax\
  400fab:	eb 11                	jmp    400fbe <phase_3+0x7b>\
  400fad:	e8 88 04 00 00       	callq  40143a <explode_bomb>\
  400fb2:	b8 00 00 00 00       	mov    $0x0,%eax\
  400fb7:	eb 05                	jmp    400fbe <phase_3+0x7b>\
  400fb9:	b8 37 01 00 00       	mov    $0x137,%eax\
  400fbe:	3b 44 24 0c          	cmp    0xc(%rsp),%eax\
  400fc2:	74 05                	je     400fc9 <phase_3+0x86>\
  400fc4:	e8 71 04 00 00       	callq  40143a <explode_bomb>\
  400fc9:	48 83 c4 18          	add    $0x18,%rsp\
  400fcd:	c3                   	retq   \
\
Prime: gives us two registers:\
%rcx
\f1 \'a1\'b80xc(%rsp)\'a1\'b9
\f0  & %rdx
\f1 \'a1\'b80x8(%rsp)\'a1\'b9
\f0 \
> we could learn that in stack, input order is: %rdx,thrn %rcx\
> so we need to find these locs: use \'93(gdb)x/s 0x4025cf\'94 to find the sequence\
0x4025cf: \'94%d %d\'94\
> we need to input two nuns, first is in %rdx, second is in %rcx 
\f1 \'a1\'b8never mind the arguments orders\'a1\'b9\
\'a1\'aa\'a1\'aa so we need to explore these two inputs \'a1\'aa\'a1\'aa\
cmpl $0x7, 0x8(%rsp)\
ja     <phase_3+106>. \'a1\'aa\'a1\'aa>  <explode_bomb>\
> it means that we couldn\'a1\'aft let %rdx>7, and it could get 0~6\
\
\'a1\'aa\'a1\'aa then, we are going to find the \'a1\'b0%rcx\'a1\'b1\'a1\'afs loc \'a1\'aa\'a1\'aa\'a1\'b8need use gdb print /x (addr)\'a1\'b9\
jmpq *0x402470(,%rax,8) : jump to *0x402470(%rip) + 8 * %rax(%rdx)\
> use print /x *0x402470 to find the %rip addr\
(gdb)print /x *0x402470\
0x400f7c\
> we could get the adding add is 0x400f7c, back to disas to find jumping loc.\

\f0 400f7c:	b8 cf 00 00 00       	mov    $0xcf,%eax\
> when %rax is 0, the %eax is 0xcf in hex.\
(400fbe:	3b 44 24 0c          	cmp    0xc(%rsp),%eax)
\f1 \
> so we could get a group of answers is: 0 207\

\f0 \
 				}